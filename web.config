<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <!-- ShellIconHandler configuration section declaration -->
  <configSections>
    <section name="iconHandler" type="Mvolo.ShellIcons.Web.ShellIconHandlerConfigurationSection" />
    <section name="directoryListing" type="Mvolo.DirectoryListing.DirectoryListingModuleConfigurationSection" />
  </configSections>

  <system.webServer>
    <modules>
      <remove name="DirectoryListingModule" />
      <add name="DirectoryListingModule" type="Mvolo.DirectoryListing.DirectoryListingModule" />
    </modules>

    <handlers>
      <remove name="StaticFile" />
      <add name="StaticFile" path="*" verb="*" modules="StaticFileModule,DefaultDocumentModule" resourceType="Either" requireAccess="Read" />
      <add name="iconhandler" path="geticon.axd" verb="GET" type="Mvolo.ShellIcons.Web.ShellIconHandler" />
    </handlers>

    <validation validateIntegratedModeConfiguration="false" />
  </system.webServer>

  <system.web>
    <httpHandlers>
      <add path="geticon.axd" verb="GET" type="Mvolo.ShellIcons.Web.ShellIconHandler" />
    </httpHandlers>
    <httpModules>
      <add name="DirectoryListingModule" type="Mvolo.DirectoryListing.DirectoryListingModule" />
    </httpModules>
  </system.web>

  <!-- 
  Directory listing module by Mike Volodarsky 
  Provides support for templated directory listings
  
  Configuration:
    enabled: whether or not the directory listing is enabled.  
      If its not, 403 Access Denied is returned
    templatePage: the template page that should be used to 
      display the directory listing
  -->
  <directoryListing enabled="true" templatePage="~/dirlisting.aspx" />
  
  <!-- 
  Icon Handler by Mike Volodarsky
  Retrieves the shell icon for the specified file name.
  
  Configuration:
    enabled: whether or not the icon handler is enabled (true by default)
    enableClientCaching: whether client caching of the icons should be allowed (true by default)
    enableServerCaching: whether the server should cache the icon bitmaps (true by default)
    alwaysUseExtension: whether the handler should always look up the icon by extension 
      and not try to use the full file name (false by default)
  -->
  <iconHandler enabled="true" 
               alwaysUseExtension="true" 
               enableClientCaching="true" 
               enableServerCaching="true" />

</configuration>
